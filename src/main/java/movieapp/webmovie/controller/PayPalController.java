package movieapp.webmovie.controller;

import movieapp.webmovie.dto.SubscriptionRequest;
import movieapp.webmovie.entity.*;
import movieapp.webmovie.enums.PaymentStatus;
import movieapp.webmovie.enums.PaymentType;
import movieapp.webmovie.repository.PaymentRepository;
import movieapp.webmovie.repository.PlanRepository;
import movieapp.webmovie.service.PayPalService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api/paypal")
public class PayPalController {

    @Autowired
    private PayPalService payPalService;

    @Autowired
    private PaymentRepository paymentRepo;

    @Autowired
    private PlanRepository planRepo;

    // ‚úÖ 1. T·∫°o ƒë∆°n h√†ng PayPal
    @PostMapping("/create-order")
    public String createOrder(@RequestBody SubscriptionRequest request) throws IOException {
        // ‚úÖ Ki·ªÉm tra null
        if (request.getPlanId() == null || request.getUserId() == null || request.getPaymentMethod() == null) {
            return "‚ùå Thi·∫øu th√¥ng tin: planId, userId ho·∫∑c paymentMethod.";
        }

        // ü™µ Log request
        System.out.println("üîç Nh·∫≠n request create-order:");
        System.out.println("PlanID: " + request.getPlanId());
        System.out.println("UserID: " + request.getUserId());
        System.out.println("Payment Method: " + request.getPaymentMethod());

        // üîç T√¨m plan theo ID
        Plan plan = planRepo.findById(request.getPlanId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y g√≥i v·ªõi ID: " + request.getPlanId()));

        // üëâ T·∫°o transactionRef duy nh·∫•t
        String transactionRef = UUID.randomUUID().toString();

        // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng Payment v√† l∆∞u
        Payment payment = new Payment();
        payment.setUserId(request.getUserId());
        payment.setAmount(plan.getPrice());
        payment.setPaymentMethod(request.getPaymentMethod());
        payment.setTransactionRef(transactionRef);
        payment.setPaymentStatus(PaymentStatus.PENDING);
        payment.setPaymentType(PaymentType.subscription);
        payment.setPaidAt(LocalDateTime.now());
        payment.setPlanId(request.getPlanId());

        paymentRepo.save(payment);

        // ‚úÖ G·ª≠i ƒë∆°n h√†ng ƒë·∫øn PayPal
        return payPalService.createOrder(plan.getPrice().toPlainString(), transactionRef);
    }

    // ‚úÖ 2. Capture ƒë∆°n h√†ng PayPal sau khi thanh to√°n th√†nh c√¥ng
    @GetMapping("/capture-order")
    public String captureOrder(@RequestParam("token") String orderId,
            @RequestParam("transactionRef") String transactionRef) throws IOException {
        // G·ª≠i y√™u c·∫ßu x√°c nh·∫≠n v·ªõi PayPal
        String result = payPalService.captureOrder(orderId);

        if (result.startsWith("Giao d·ªãch th√†nh c√¥ng")) {
            // üîç T√¨m l·∫°i payment ƒë√£ l∆∞u b·∫±ng transactionRef
            Optional<Payment> optionalPayment = paymentRepo.findByTransactionRef(transactionRef);

            if (optionalPayment.isPresent()) {
                Payment payment = optionalPayment.get();

                // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
                payment.setPaymentStatus(PaymentStatus.SUCCESS);
                paymentRepo.save(payment);

                return "Thanh to√°n & k√≠ch ho·∫°t g√≥i th√†nh c√¥ng ";
            } else {
                return "‚ö† Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£: " + transactionRef;
            }
        }

        return "‚ùå Giao d·ªãch th·∫•t b·∫°i: " + result;
    }
}
